name: Generate PDF from JavaScript Guide

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        echo "📁 设置工作环境..."
        mkdir -p _output _temp
        echo "当前目录: $(pwd)"

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-fonts-recommended \
          texlive-latex-extra \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils \
          python3

    - name: Create Simple Combined File
      run: |
        echo "📝 创建简单合并文件..."
        
        # 创建简单的合并文件，不添加额外格式
        touch _temp/simple_combined.md
        
        # 添加README
        if [ -f "README.md" ]; then
          cat "README.md" >> _temp/simple_combined.md
          echo "" >> _temp/simple_combined.md
          echo "---" >> _temp/simple_combined.md
          echo "" >> _temp/simple_combined.md
        fi
        
        # 按顺序添加章节
        for i in {1..17}; do
          chapter_file="./docs/ch${i}.md"
          if [ -f "$chapter_file" ]; then
            echo "添加: $chapter_file"
            echo "# 第${i}章" >> _temp/simple_combined.md
            echo "" >> _temp/simple_combined.md
            cat "$chapter_file" >> _temp/simple_combined.md
            echo "" >> _temp/simple_combined.md
            echo "---" >> _temp/simple_combined.md
            echo "" >> _temp/simple_combined.md
          fi
        done
        
        echo "✅ 简单合并完成"
        echo "文件大小: $(ls -lh _temp/simple_combined.md)"

    - name: Create Robust LaTeX Header
      run: |
        echo "📄 创建健壮的LaTeX头文件..."
        
        cat > _temp/header.tex << 'EOF'
        \usepackage{fontspec}
        \setmainfont{Noto Sans CJK SC}
        \usepackage{geometry}
        \geometry{a4paper, margin=2.5cm}
        \usepackage{hyperref}
        
        % 超链接设置
        \hypersetup{
          colorlinks=true,
          linkcolor=blue,
          urlcolor=cyan,
          pdftitle={JavaScript权威指南第七版},
          pdfauthor={Richard-Billyham}
        }
        
        % 处理Unicode字符
        \usepackage{newunicodechar}
        \newunicodechar{^^^^ffff}{\ensuremath{\infty}}
        
        % 禁用复杂包，避免错误
        \usepackage{listings}
        \lstset{
          basicstyle=\ttfamily\small,
          breaklines=true,
          frame=none,
          upquote=true
        }
        EOF

    - name: Method 1 - Direct Simple Conversion
      run: |
        echo "🎯 方法1: 直接简单转换..."
        
        # 最简单的转换，不使用任何复杂设置
        pandoc "_temp/simple_combined.md" -o "_output/simple.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm
        
        echo "✅ 方法1完成"

    - name: Method 2 - With TOC and Metadata
      if: failure()
      run: |
        echo "🎯 方法2: 带目录和元数据..."
        
        pandoc "_temp/simple_combined.md" -o "_output/with-toc.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          --table-of-contents \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ 方法2完成"

    - name: Method 3 - Remove Problematic Content
      if: failure()
      run: |
        echo "🎯 方法3: 移除问题内容..."
        
        # 创建Python脚本来清理问题内容
        cat > _temp/clean_content.py << 'EOF'
        import re
        import sys
        
        def clean_content(text):
            # 移除或替换可能导致问题的Unicode序列
            text = re.sub(r'\\u[0-9a-fA-F]{4}', '?', text)  # 替换 \uXXXX
            text = re.sub(r'\\U[0-9a-fA-F]{8}', '?', text)  # 替换 \UXXXXXXXX
            text = re.sub(r'Codepoints above \\uffff', 'Codepoints above U+FFFF', text)
            
            # 转义LaTeX特殊字符，但只在非代码块中
            lines = text.split('\n')
            in_code_block = False
            result_lines = []
            
            for line in lines:
                if line.strip().startswith('```'):
                    in_code_block = not in_code_block
                    result_lines.append(line)
                    continue
                    
                if not in_code_block:
                    # 只在非代码块中转义特殊字符
                    line = line.replace('\\', '\\\\')
                    line = line.replace('#', '\\#')
                    line = line.replace('$', '\\$')
                    line = line.replace('%', '\\%')
                    line = line.replace('&', '\\&')
                    line = line.replace('_', '\\_')
                    line = line.replace('{', '\\{')
                    line = line.replace('}', '\\}')
                
                result_lines.append(line)
            
            return '\n'.join(result_lines)
        
        with open('_temp/simple_combined.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        cleaned_content = clean_content(content)
        
        with open('_temp/cleaned.md', 'w', encoding='utf-8') as f:
            f.write(cleaned_content)
        
        print("✅ 内容清理完成")
        EOF
        
        python3 _temp/clean_content.py
        
        pandoc "_temp/cleaned.md" -o "_output/cleaned.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm
        
        echo "✅ 方法3完成"

    - name: Method 4 - Convert to HTML First
      if: failure()
      run: |
        echo "🎯 方法4: 先转换为HTML..."
        
        # 先转换为HTML
        pandoc "_temp/simple_combined.md" -o "_temp/document.html" \
          --toc \
          --self-contained \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ HTML转换完成"
        
        # 尝试使用weasyprint将HTML转为PDF
        if ! command -v weasyprint &> /dev/null; then
          echo "安装weasyprint..."
          pip3 install weasyprint
        fi
        
        weasyprint "_temp/document.html" "_output/html-converted.pdf"
        
        echo "✅ 方法4完成"

    - name: Method 5 - Use Docker with Full LaTeX
      if: failure()
      run: |
        echo "🎯 方法5: 使用完整LaTeX环境的Docker..."
        
        # 使用完整的LaTeX Docker镜像
        docker run --rm -v $(pwd):/data pandoc/latex:latest \
          "_temp/simple_combined.md" -o "_output/docker-generated.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="DejaVu Sans" \
          --table-of-contents
        
        echo "✅ 方法5完成"

    - name: Method 6 - Generate by Individual Chapters
      if: failure()
      run: |
        echo "🎯 方法6: 单独生成每个章节..."
        
        # 为每个章节单独生成PDF
        success_count=0
        
        for i in {1..17}; do
          chapter_file="./docs/ch${i}.md"
          if [ -f "$chapter_file" ]; then
            echo "处理: ch${i}.md"
            
            # 直接转换，不做复杂处理
            if pandoc "$chapter_file" -o "_output/ch${i}.pdf" \
              --pdf-engine=xelatex \
              -V mainfont="Noto Sans CJK SC" \
              -V geometry:margin=2.5cm 2>/dev/null; then
              echo "✅ ch${i} 生成成功"
              success_count=$((success_count+1))
            else
              echo "❌ ch${i} 生成失败"
            fi
          fi
        done
        
        echo "章节生成完成: $success_count/17 成功"

    - name: Method 7 - Last Resort Minimal PDF
      if: failure()
      run: |
        echo "🎯 方法7: 最后手段 - 最小PDF..."
        
        # 只生成README和第一章
        if [ -f "README.md" ] && [ -f "./docs/ch1.md" ]; then
          {
            cat "README.md"
            echo ""
            echo "---"
            echo ""
            cat "./docs/ch1.md"
          } > _temp/minimal.md
          
          pandoc "_temp/minimal.md" -o "_output/minimal.pdf" \
            --pdf-engine=xelatex \
            -V mainfont="Noto Sans CJK SC"
        fi
        
        echo "✅ 方法7完成"

    - name: Check Results and Create Final PDF
      run: |
        echo "📊 检查结果并创建最终PDF..."
        
        # 查找任何成功的PDF
        found_pdf=""
        for pdf in _output/*.pdf; do
          if [ -f "$pdf" ]; then
            size=$(stat -c%s "$pdf")
            if [ $size -gt 10240 ]; then  # 大于10KB
              echo "✅ 找到有效PDF: $pdf ($((size/1024)) KB)"
              found_pdf="$pdf"
              break
            fi
          fi
        done
        
        if [ -n "$found_pdf" ]; then
          # 复制第一个找到的有效PDF作为最终结果
          cp "$found_pdf" "_output/JavaScript权威指南.pdf"
          echo "🎉 最终PDF创建成功: _output/JavaScript权威指南.pdf"
        else
          echo "❌ 没有找到有效的PDF文件"
          echo "调试信息:"
          echo "输出目录内容:"
          ls -la _output/ || echo "输出目录为空"
          echo "临时目录内容:"
          ls -la _temp/ || echo "临时目录为空"
          exit 1
        fi

    - name: Upload Final PDF
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript-Guide-PDF
        path: _output/JavaScript权威指南.pdf
        retention-days: 30

    - name: Upload All Generated Files
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: All-Generated-Files
        path: _output/
        retention-days: 7
