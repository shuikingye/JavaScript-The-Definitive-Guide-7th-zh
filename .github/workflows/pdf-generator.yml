name: Generate PDF from JavaScript Guide

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        echo "📁 设置工作环境..."
        mkdir -p _output _temp
        echo "当前目录: $(pwd)"
        echo "项目结构:"
        find . -name "*.md" -type f | sort

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-fonts-recommended \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils \
          python3

    - name: Create Structured Markdown File
      run: |
        echo "📝 创建结构化Markdown文件..."
        
        # 创建封面和目录
        cat > _temp/complete.md << 'EOF'
        # JavaScript权威指南第七版
        
        **作者: Richard-Billyham**
        
        **生成时间: $(date)**
        
        ***
        
        ## 目录
        
        EOF
        
        # 添加README.md内容
        if [ -f "README.md" ]; then
          echo "添加简介..."
          echo "# 简介" >> _temp/complete.md
          echo "" >> _temp/complete.md
          cat "README.md" >> _temp/complete.md
          echo "" >> _temp/complete.md
          echo "\\newpage" >> _temp/complete.md
          echo "" >> _temp/complete.md
        fi
        
        # 按正确顺序添加章节
        chapters=(
          "./docs/ch1.md"
          "./docs/ch2.md" 
          "./docs/ch3.md"
          "./docs/ch4.md"
          "./docs/ch5.md"
          "./docs/ch6.md"
          "./docs/ch7.md"
          "./docs/ch8.md"
          "./docs/ch9.md"
          "./docs/ch10.md"
          "./docs/ch11.md"
          "./docs/ch12.md"
          "./docs/ch13.md"
          "./docs/ch14.md"
          "./docs/ch15.md"
          "./docs/ch16.md"
          "./docs/ch17.md"
        )
        
        for chapter in "${chapters[@]}"; do
          if [ -f "$chapter" ]; then
            echo "添加章节: $chapter"
            # 提取章节标题
            title=$(basename "$chapter" .md | sed 's/ch/第/' | sed 's/$/章/')
            echo "# $title" >> _temp/complete.md
            echo "" >> _temp/complete.md
            cat "$chapter" >> _temp/complete.md
            echo "" >> _temp/complete.md
            echo "\\newpage" >> _temp/complete.md
            echo "" >> _temp/complete.md
          else
            echo "⚠️  章节不存在: $chapter"
          fi
        done
        
        echo "✅ 文件创建完成"
        echo "文件大小: $(ls -lh _temp/complete.md)"

    - name: Advanced Preprocessing with Python
      run: |
        echo "🔧 使用Python进行高级预处理..."
        
        # 创建Python脚本来处理转义序列
        cat > _temp/preprocess.py << 'EOF'
        import re
        
        def escape_latex_special_chars(text):
            # LaTeX特殊字符转义映射
            escape_map = {
                '\\': '\\\\textbackslash{}',
                '#': '\\#',
                '$': '\\$',
                '%': '\\%',
                '&': '\\&',
                '_': '\\_',
                '{': '\\{',
                '}': '\\}',
                '~': '\\textasciitilde{}',
                '^': '\\textasciicircum{}',
                '<': '\\textless{}',
                '>': '\\textgreater{}',
                '|': '\\textbar{}'
            }
            
            # 首先处理代码块中的转义序列
            lines = text.split('\n')
            in_code_block = False
            processed_lines = []
            
            for line in lines:
                # 检测代码块开始/结束
                if line.strip().startswith('```'):
                    in_code_block = not in_code_block
                    processed_lines.append(line)
                    continue
                
                if in_code_block:
                    # 在代码块中，特别处理转义序列
                    # 将 \n 替换为 \\n，\t 替换为 \\t 等
                    line = line.replace('\\n', '\\\\n')
                    line = line.replace('\\t', '\\\\t')
                    line = line.replace('\\r', '\\\\r')
                    line = line.replace('\\"', '\\\\"')
                    line = line.replace("\\'", "\\\\'")
                    line = line.replace('\\`', '\\\\`')
                    processed_lines.append(line)
                else:
                    # 在普通文本中，转义所有LaTeX特殊字符
                    for char, escaped in escape_map.items():
                        line = line.replace(char, escaped)
                    processed_lines.append(line)
            
            return '\n'.join(processed_lines)
        
        # 读取原始文件
        with open('_temp/complete.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 处理内容
        processed_content = escape_latex_special_chars(content)
        
        # 保存处理后的内容
        with open('_temp/complete_processed.md', 'w', encoding='utf-8') as f:
            f.write(processed_content)
        
        print("✅ Python预处理完成")
        EOF
        
        # 运行Python预处理脚本
        python3 _temp/preprocess.py
        
        echo "预处理后文件大小: $(ls -lh _temp/complete_processed.md)"

    - name: Create LaTeX Header
      run: |
        echo "📄 创建LaTeX头文件..."
        
        cat > _temp/header.tex << 'EOF'
        \usepackage{fontspec}
        \setmainfont{Noto Sans CJK SC}
        \usepackage{geometry}
        \geometry{a4paper, margin=2.5cm}
        \usepackage{titlesec}
        \usepackage{fancyhdr}
        \usepackage{xcolor}
        \usepackage{hyperref}
        \usepackage{listings}
        \usepackage{upquote}
        
        % 章节样式
        \titleformat{\chapter}
          {\normalfont\Huge\bfseries}{\thechapter}{1em}{}
        \titleformat{\section}
          {\normalfont\Large\bfseries}{\thesection}{1em}{}
          
        % 页眉页脚
        \pagestyle{fancy}
        \fancyhf{}
        \fancyhead[L]{\leftmark}
        \fancyhead[R]{\thepage}
        
        % 超链接设置
        \hypersetup{
          colorlinks=true,
          linkcolor=blue,
          urlcolor=cyan,
          pdftitle={JavaScript权威指南第七版},
          pdfauthor={Richard-Billyham}
        }
        
        % 代码块处理
        \lstset{
          basicstyle=\ttfamily\small,
          breaklines=true,
          frame=single,
          backgroundcolor=\color{gray!5},
          upquote=true,
          showstringspaces=false
        }
        EOF
        
        echo "✅ LaTeX头文件创建完成"

    - name: Generate PDF - Method 1 (Simple)
      run: |
        echo "🎯 方法1: 简单生成PDF..."
        
        pandoc "_temp/complete_processed.md" -o "_output/javascript-guide.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          --table-of-contents \
          --toc-depth=3 \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ 方法1完成"

    - name: Generate PDF - Method 2 (With Header)
      if: failure()
      run: |
        echo "🎯 方法2: 使用头文件生成PDF..."
        
        pandoc "_temp/complete_processed.md" -o "_output/javascript-guide-with-header.pdf" \
          --pdf-engine=xelatex \
          --include-in-header="${{ github.workspace }}/_temp/header.tex" \
          --table-of-contents \
          --toc-depth=3 \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ 方法2完成"

    - name: Generate PDF - Method 3 (Chapter by Chapter)
      if: failure()
      run: |
        echo "🎯 方法3: 分章节生成PDF..."
        
        # 为每个章节单独生成PDF
        chapters=("ch1" "ch2" "ch3" "ch4" "ch5" "ch6" "ch7" "ch8" "ch9" "ch10" "ch11" "ch12" "ch13" "ch14" "ch15" "ch16" "ch17")
        
        success_count=0
        for chapter in "${chapters[@]}"; do
          chapter_file="./docs/${chapter}.md"
          if [ -f "$chapter_file" ]; then
            echo "处理章节: $chapter"
            
            # 为每个章节创建单独的文件
            cat > "_temp/${chapter}_processed.md" << EOF
            # ${chapter}
            
            EOF
            cat "$chapter_file" >> "_temp/${chapter}_processed.md"
            
            # 简单转义处理
            sed -i 's/\\/\\\\/g' "_temp/${chapter}_processed.md"
            sed -i 's/#/\\#/g' "_temp/${chapter}_processed.md"
            sed -i 's/\$/\\$/g' "_temp/${chapter}_processed.md"
            
            if pandoc "_temp/${chapter}_processed.md" -o "_output/${chapter}.pdf" \
              --pdf-engine=xelatex \
              -V mainfont="Noto Sans CJK SC" \
              -V geometry:margin=2.5cm; then
              echo "✅ $chapter 生成成功"
              success_count=$((success_count+1))
            else
              echo "❌ $chapter 生成失败"
              # 尝试不使用转义
              cp "$chapter_file" "_temp/${chapter}_simple.md"
              if pandoc "_temp/${chapter}_simple.md" -o "_output/${chapter}_simple.pdf" \
                --pdf-engine=xelatex \
                -V mainfont="Noto Sans CJK SC" 2>/dev/null; then
                echo "✅ $chapter (简单版) 生成成功"
                success_count=$((success_count+1))
              fi
            fi
          fi
        done
        
        echo "分章节生成完成: $success_count/17 成功"

    - name: Generate PDF - Method 4 (Minimal Content)
      if: failure()
      run: |
        echo "🎯 方法4: 最小内容生成PDF..."
        
        # 只使用README.md和第一章测试
        if [ -f "README.md" ]; then
          cp "README.md" "_temp/minimal.md"
          echo "" >> "_temp/minimal.md"
          echo "\\newpage" >> "_temp/minimal.md"
          echo "" >> "_temp/minimal.md"
        fi
        
        if [ -f "./docs/ch1.md" ]; then
          cat "./docs/ch1.md" >> "_temp/minimal.md"
        fi
        
        # 简单转义
        sed -i 's/\\/\\\\/g' "_temp/minimal.md"
        
        pandoc "_temp/minimal.md" -o "_output/minimal-guide.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          --table-of-contents
        
        echo "✅ 方法4完成"

    - name: Check and Upload Results
      run: |
        echo "📊 检查生成结果..."
        
        # 检查所有PDF文件
        success=false
        for pdf in _output/*.pdf; do
          if [ -f "$pdf" ]; then
            size=$(stat -c%s "$pdf")
            echo "找到: $pdf ($((size/1024)) KB)"
            if [ $size -gt 102400 ]; then  # 大于100KB
              success=true
              echo "🎉 找到有效的PDF文件: $pdf"
            fi
          fi
        done
        
        if [ "$success" = false ]; then
          echo "❌ 没有生成有效的PDF文件"
          echo "调试信息:"
          echo "检查 complete_processed.md 是否存在:"
          ls -la _temp/complete_processed.md || echo "文件不存在"
          echo "前10行内容:"
          head -10 _temp/complete_processed.md || echo "无法读取文件"
          exit 1
        else
          echo "✅ PDF生成成功!"
        fi

    - name: Upload PDF Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript-Guide-PDF
        path: _output/*.pdf
        retention-days: 30

    - name: Upload Debug Info
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Debug-Info
        path: _temp/
        retention-days: 7
