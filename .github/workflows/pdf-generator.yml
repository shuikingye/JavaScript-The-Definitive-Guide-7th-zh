name: Generate PDF from Markdown

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        echo "📁 设置工作环境..."
        mkdir -p _output _temp
        echo "当前目录: $(pwd)"
        echo "目录内容:"
        ls -la
        echo "Markdown 文件:"
        find . -name "*.md" -type f | head -20

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-fonts-recommended \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils

    - name: Create Complete Markdown File
      id: create_md
      run: |
        echo "📝 创建完整的Markdown文件..."
        
        # 确保_temp目录存在
        mkdir -p _temp
        
        # 创建基础文件
        echo "# JavaScript权威指南第七版" > _temp/complete.md
        echo "" >> _temp/complete.md
        echo "**作者: Richard-Billyham**" >> _temp/complete.md
        echo "" >> _temp/complete.md
        echo "***" >> _temp/complete.md
        echo "" >> _temp/complete.md
        
        # 添加README.md
        if [ -f "README.md" ]; then
          echo "添加 README.md"
          cat "README.md" >> _temp/complete.md
          echo "" >> _temp/complete.md
          echo "\\newpage" >> _temp/complete.md
          echo "" >> _temp/complete.md
        else
          echo "⚠️  README.md 不存在"
        fi
        
        # 查找并添加其他markdown文件
        echo "查找其他Markdown文件..."
        find . -name "*.md" -type f \
          ! -path "./.git/*" \
          ! -path "./node_modules/*" \
          ! -path "./_output/*" \
          ! -path "./_temp/*" \
          ! -name "README.md" \
          ! -name "CONTRIBUTING.md" \
          ! -name "CHANGELOG.md" > _temp/file_list.txt
        
        if [ -s "_temp/file_list.txt" ]; then
          echo "找到以下文件:"
          cat _temp/file_list.txt
          
          # 按数字排序
          sort -V _temp/file_list.txt > _temp/sorted_files.txt
          
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "添加: $file"
              echo "# $(basename "$file" .md)" >> _temp/complete.md
              echo "" >> _temp/complete.md
              cat "$file" >> _temp/complete.md
              echo "" >> _temp/complete.md
              echo "\\newpage" >> _temp/complete.md
              echo "" >> _temp/complete.md
            fi
          done < _temp/sorted_files.txt
        else
          echo "⚠️  没有找到其他Markdown文件"
        fi
        
        # 验证文件创建
        if [ ! -f "_temp/complete.md" ]; then
          echo "❌ 未能创建 _temp/complete.md"
          exit 1
        fi
        
        echo "✅ 文件创建成功"
        echo "文件大小: $(ls -lh _temp/complete.md)"
        echo "行数: $(wc -l < _temp/complete.md)"

    - name: Method 1 - Simple Pandoc
      run: |
        echo "🎯 方法1: 简单Pandoc转换..."
        
        if [ ! -f "_temp/complete.md" ]; then
          echo "❌ _temp/complete.md 不存在"
          exit 1
        fi
        
        # 最简单的pandoc命令
        pandoc "_temp/complete.md" -o "_output/method1-simple.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          --table-of-contents \
          --toc-depth=2
        
        echo "✅ 方法1完成"

    - name: Method 2 - With Metadata
      run: |
        echo "🎯 方法2: 带元数据的转换..."
        
        if [ ! -f "_temp/complete.md" ]; then
          echo "❌ _temp/complete.md 不存在"
          exit 1
        fi
        
        pandoc "_temp/complete.md" -o "_output/method2-with-metadata.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          -V fontsize=12pt \
          --table-of-contents \
          --toc-depth=3 \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ 方法2完成"

    - name: Method 3 - Escape Special Characters
      run: |
        echo "🎯 方法3: 转义特殊字符..."
        
        if [ ! -f "_temp/complete.md" ]; then
          echo "❌ _temp/complete.md 不存在"
          exit 1
        fi
        
        # 创建转义版本
        cp "_temp/complete.md" "_temp/complete_escaped.md"
        
        # 转义反斜杠（主要问题）
        sed -i 's/\\/\\\\/g' "_temp/complete_escaped.md"
        
        # 转义其他LaTeX特殊字符
        sed -i 's/#/\\#/g' "_temp/complete_escaped.md"
        sed -i 's/\$/\\$/g' "_temp/complete_escaped.md"
        sed -i 's/%/\\%/g' "_temp/complete_escaped.md"
        sed -i 's/&/\\&/g' "_temp/complete_escaped.md"
        sed -i 's/_/\\_/g' "_temp/complete_escaped.md"
        
        pandoc "_temp/complete_escaped.md" -o "_output/method3-escaped.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          --table-of-contents
        
        echo "✅ 方法3完成"

    - name: Method 4 - Use Listings for Code
      run: |
        echo "🎯 方法4: 使用listings处理代码..."
        
        if [ ! -f "_temp/complete.md" ]; then
          echo "❌ _temp/complete.md 不存在"
          exit 1
        fi
        
        # 创建简单的LaTeX头文件
        mkdir -p _temp
        cat > _temp/header.tex << 'EOF'
        \usepackage{listings}
        \usepackage{xcolor}
        
        \lstset{
          basicstyle=\ttfamily\small,
          breaklines=true,
          frame=single,
          backgroundcolor=\color{gray!5},
          numbers=left
        }
        EOF
        
        pandoc "_temp/complete.md" -o "_output/method4-listings.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          --table-of-contents \
          --listings \
          --include-in-header="${{ github.workspace }}/_temp/header.tex"
        
        echo "✅ 方法4完成"

    - name: Method 5 - Minimal Approach
      run: |
        echo "🎯 方法5: 最小化方法..."
        
        if [ ! -f "_temp/complete.md" ]; then
          echo "❌ _temp/complete.md 不存在"
          exit 1
        fi
        
        # 只转换前N行来测试
        head -n 5000 "_temp/complete.md" > "_temp/minimal_test.md"
        
        pandoc "_temp/minimal_test.md" -o "_output/method5-minimal.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm
        
        echo "✅ 方法5完成"

    - name: Verify Results
      run: |
        echo "📊 验证生成结果..."
        
        # 检查_output目录
        echo "输出目录内容:"
        ls -la _output/ || echo "输出目录不存在"
        
        # 检查生成的PDF文件
        shopt -s nullglob
        pdf_count=0
        for pdf in _output/*.pdf; do
          if [ -f "$pdf" ]; then
            size=$(stat -c%s "$pdf")
            echo "✅ 找到: $pdf ($((size/1024)) KB)"
            pdf_count=$((pdf_count+1))
          fi
        done
        
        if [ $pdf_count -eq 0 ]; then
          echo "❌ 没有生成任何PDF文件"
          echo "调试信息:"
          echo "工作目录: $(pwd)"
          echo "_temp目录内容:"
          ls -la _temp/ || echo "_temp目录不存在"
          echo "complete.md前10行:"
          head -10 _temp/complete.md || echo "无法读取complete.md"
          exit 1
        else
          echo "🎉 成功生成 $pdf_count 个PDF文件"
        fi

    - name: Upload PDF Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Generated-PDFs
        path: _output/*.pdf
        retention-days: 30

    - name: Upload Debug Info
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Debug-Info
        path: |
          _temp/
        retention-days: 7
