name: Generate PDF from Markdown

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        mkdir -p _output
        echo "工作目录结构:"
        find . -type f -name "*.md" | head -20

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-fonts-recommended \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils

    - name: Create Simple Markdown Index
      run: |
        echo "# JavaScript权威指南第七版" > _temp/complete.md
        echo "" >> _temp/complete.md
        echo "**作者: Richard-Billyham**" >> _temp/complete.md
        echo "" >> _temp/complete.md
        echo "***" >> _temp/complete.md
        echo "" >> _temp/complete.md
        
        # 添加 README.md 内容
        if [ -f "README.md" ]; then
          cat "README.md" >> _temp/complete.md
          echo "" >> _temp/complete.md
          echo "\\newpage" >> _temp/complete.md
          echo "" >> _temp/complete.md
        fi
        
        # 查找并添加所有其他 markdown 文件
        find . -name "*.md" -type f \
          ! -path "./.git/*" \
          ! -path "./node_modules/*" \
          ! -path "./_output/*" \
          ! -path "./_temp/*" \
          ! -name "README.md" \
          ! -name "CONTRIBUTING.md" \
          ! -name "CHANGELOG.md" | sort -V > _temp/files.txt
        
        if [ -s "_temp/files.txt" ]; then
          while IFS= read -r file; do
            echo "添加: $file"
            echo "# $(basename "$file" .md)" >> _temp/complete.md
            echo "" >> _temp/complete.md
            cat "$file" >> _temp/complete.md
            echo "" >> _temp/complete.md
            echo "\\newpage" >> _temp/complete.md
            echo "" >> _temp/complete.md
          done < _temp/files.txt
        fi
        
        echo "合并完成，文件大小:"
        ls -lh _temp/complete.md

    - name: Escape Special Characters
      run: |
        echo "转义特殊字符..."
        # 创建处理后的版本
        cp _temp/complete.md _temp/complete_escaped.md
        
        # 使用简单的 sed 命令转义 LaTeX 特殊字符
        # 注意：这可能会影响代码块，但为了成功编译，我们暂时接受
        sed -i 's/\\/\\\\textbackslash /g' _temp/complete_escaped.md
        sed -i 's/#/\\#/g' _temp/complete_escaped.md
        sed -i 's/\$/\\$/g' _temp/complete_escaped.md
        sed -i 's/%/\\%/g' _temp/complete_escaped.md
        sed -i 's/&/\\&/g' _temp/complete_escaped.md
        sed -i 's/_/\\_/g' _temp/complete_escaped.md
        sed -i 's/{/\\{/g' _temp/complete_escaped.md
        sed -i 's/}/\\}/g' _temp/complete_escaped.md
        sed -i 's/~/\\textasciitilde /g' _temp/complete_escaped.md
        sed -i 's/\^/\\textasciicircum /g' _temp/complete_escaped.md
        
        echo "转义完成"

    - name: Generate PDF with Minimal Settings
      run: |
        echo "🎯 使用最小化设置生成PDF..."
        
        # 方法1: 最简单的pandoc命令
        pandoc _temp/complete_escaped.md -o _output/javascript-guide.pdf \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          --table-of-contents \
          --toc-depth=3
        
        echo "✅ PDF生成完成"

    - name: Alternative Method - Use Basic LaTeX Template
      if: failure()
      run: |
        echo "🔄 使用基础LaTeX模板..."
        
        # 创建基础LaTeX模板
        cat > _temp/template.tex << 'EOF'
        \documentclass[a4paper,12pt]{book}
        \usepackage{xeCJK}
        \setCJKmainfont{Noto Sans CJK SC}
        \usepackage{geometry}
        \geometry{a4paper, margin=2.5cm}
        \usepackage{hyperref}
        \hypersetup{
            colorlinks=true,
            linkcolor=blue,
            urlcolor=cyan,
            pdftitle={JavaScript权威指南第七版},
            pdfauthor={Richard-Billyham}
        }
        \usepackage{titlesec}
        \titleformat{\chapter}{\huge\bfseries}{\thechapter}{1em}{}
        \titleformat{\section}{\Large\bfseries}{\thesection}{1em}{}
        \titleformat{\subsection}{\large\bfseries}{\thesubsection}{1em}{}
        
        \begin{document}
        \maketitle
        \tableofcontents
        $body$
        \end{document}
        EOF
        
        # 使用模板生成PDF
        pandoc _temp/complete.md -o _output/javascript-guide-template.pdf \
          --template=_temp/template.tex \
          --pdf-engine=xelatex \
          --table-of-contents
        
        echo "✅ 模板方法完成"

    - name: Final Attempt - HTML to PDF
      if: failure()
      run: |
        echo "🔄 最终尝试：HTML转PDF..."
        
        # 先生成HTML
        pandoc _temp/complete.md -o _temp/complete.html \
          --toc \
          --toc-depth=3
        
        # 然后使用weasyprint将HTML转为PDF（如果可用）
        if command -v weasyprint >/dev/null 2>&1; then
          weasyprint _temp/complete.html _output/javascript-guide-weasyprint.pdf
        else
          # 安装weasyprint
          sudo apt-get install -y python3-weasyprint || \
          pip3 install weasyprint || \
          (echo "无法安装weasyprint，跳过此方法" && exit 0)
          
          weasyprint _temp/complete.html _output/javascript-guide-weasyprint.pdf
        fi
        
        echo "✅ HTML转PDF完成"

    - name: Last Resort - Use Docker with Prebuilt Environment
      if: failure()
      run: |
        echo "🚀 使用Docker预构建环境..."
        
        # 使用pandoc/latex的Docker镜像
        docker run --rm -v $(pwd):/data pandoc/latex \
          _temp/complete.md -o _output/javascript-guide-docker.pdf \
          --pdf-engine=xelatex \
          -V mainfont="Noto Serif" \
          --table-of-contents
        
        echo "✅ Docker方法完成"

    - name: Verify and Upload Results
      run: |
        echo "📊 检查生成结果..."
        
        # 检查所有可能的输出文件
        shopt -s nullglob
        for pdf in _output/*.pdf; do
          if [ -f "$pdf" ]; then
            size=$(stat -c%s "$pdf")
            echo "✅ 找到: $pdf ($((size/1024/1024)) MB)"
          fi
        done
        
        # 如果没有找到任何PDF，创建错误标记
        if ! compgen -G "_output/*.pdf" > /dev/null; then
          echo "❌ 没有生成任何PDF文件"
          echo "调试信息:"
          echo "原始文件大小: $(ls -lh _temp/complete.md)"
          echo "转义文件大小: $(ls -lh _temp/complete_escaped.md)"
          echo "前10行内容:"
          head -10 _temp/complete.md
          exit 1
        fi

    - name: Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript-Guide-PDF
        path: _output/*.pdf
        retention-days: 30
