name: Generate PDF from Markdown

on:
  push:
    branches: [main, master]
  workflow_dispatch:  # 允许手动触发

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        mkdir -p _output _temp
        echo "工作目录: $(pwd)"
        echo "文件列表:"
        find . -name "*.md" -type f | head -10

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-science \
          texlive-pictures \
          lmodern \
          fonts-noto-cjk \
          fonts-noto-color-emoji

    - name: Check Markdown Files
      id: check_files
      run: |
        # 确定入口文件
        if [ -f "README.md" ]; then
          ENTRY_FILE="README.md"
        elif [ -f "main.md" ]; then
          ENTRY_FILE="main.md"
        elif [ -f "index.md" ]; then
          ENTRY_FILE="index.md"
        else
          ENTRY_FILE=$(find . -name "*.md" -type f | head -1)
        fi
        
        if [ -z "$ENTRY_FILE" ]; then
          echo "❌ 未找到任何 Markdown 文件"
          exit 1
        fi
        
        echo "📖 使用入口文件: $ENTRY_FILE"
        echo "entry_file=$ENTRY_FILE" >> $GITHUB_OUTPUT
        
        # 记录找到的所有 Markdown 文件
        find . -name "*.md" -type f \
          ! -path "./.git/*" \
          ! -path "./node_modules/*" \
          ! -path "./_output/*" \
          ! -path "./_temp/*" > _temp/all_markdown_files.txt
        
        echo "📋 找到的 Markdown 文件:"
        cat _temp/all_markdown_files.txt

    - name: Create LaTeX Header File
      run: |
        # 创建包含完整LaTeX样式的header文件
        cat > _temp/header.tex << 'EOFEND'
        \usepackage{titlesec}
        \usepackage{fancyhdr}
        \usepackage{xcolor}
        \usepackage{hyperref}
        
        % 章节标题样式
        \titleformat{\chapter}[display]
          {\normalfont\huge\bfseries\color{blue!70!black}}
          {\chaptertitlename\ \thechapter}{20pt}{\Huge}
        
        \titleformat{\section}
          {\normalfont\Large\bfseries\color{blue!60!black}}
          {\thesection}{1em}{}
        
        \titleformat{\subsection}
          {\normalfont\large\bfseries\color{blue!50!black}}
          {\thesubsection}{1em}{}
        
        % 页眉页脚设置
        \pagestyle{fancy}
        \fancyhf{}
        \fancyhead[L]{\leftmark}
        \fancyhead[R]{\thepage}
        \renewcommand{\headrulewidth}{0.5pt}
        
        % 超链接设置
        \hypersetup{
          pdfauthor={Richard-Billyham},
          pdftitle={JavaScript权威指南第七版},
          pdfsubject={JavaScript编程指南},
          pdfkeywords={JavaScript,编程,指南},
          bookmarksnumbered=true,
          bookmarksopen=true,
          pdfstartview=FitH
        }
        
        % 代码块支持
        \usepackage{listings}
        \lstset{
          basicstyle=\ttfamily\small,
          breaklines=true,
          frame=single,
          backgroundcolor=\color{gray!5}
        }
        EOFEND
        
        # 验证文件创建成功
        echo "✅ LaTeX header 文件已创建:"
        ls -la _temp/header.tex
        echo "文件内容预览:"
        head -10 _temp/header.tex

    - name: Generate PDF with Enhanced Styling
      run: |
        ENTRY_FILE="${{ steps.check_files.outputs.entry_file }}"
        WORKSPACE_PATH="${{ github.workspace }}"
        
        echo "🎯 开始生成PDF..."
        echo "入口文件: $ENTRY_FILE"
        echo "工作目录: $WORKSPACE_PATH"
        echo "Header文件路径: $WORKSPACE_PATH/_temp/header.tex"
        
        # 检查header文件是否存在
        if [ ! -f "_temp/header.tex" ]; then
          echo "❌ Header文件不存在，重新创建..."
          mkdir -p _temp
          echo "\\usepackage{hyperref}" > _temp/header.tex
        fi
        
        # 使用Pandoc生成PDF，确保使用完整路径
        pandoc "$ENTRY_FILE" -o "_output/JavaScript权威指南.pdf" \
          --metadata title="JavaScript权威指南第七版" \
          --metadata author="Richard-Billyham" \
          --table-of-contents \
          --toc-depth=3 \
          --number-sections \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V sansfont="Noto Sans CJK SC" \
          -V monofont="Noto Sans Mono CJK SC" \
          -V geometry:margin=2.5cm \
          -V geometry:a4paper \
          -V colorlinks=true \
          -V linkcolor=blue \
          -V urlcolor=cyan \
          -V toccolor=blue \
          -V papersize=a4 \
          -V fontsize=11pt \
          -V linestretch=1.2 \
          --include-in-header="$WORKSPACE_PATH/_temp/header.tex" \
          --highlight-style=tango
        
        echo "✅ PDF生成命令执行完成"

    - name: Verify PDF Generation
      run: |
        if [ ! -f "_output/JavaScript权威指南.pdf" ]; then
          echo "❌ PDF 文件生成失败"
          echo "当前目录内容:"
          ls -la
          echo "_output 目录内容:"
          ls -la _output/ || echo "_output 目录不存在"
          exit 1
        else
          echo "✅ PDF 文件生成成功"
          echo "文件信息:"
          ls -la "_output/JavaScript权威指南.pdf"
          # 尝试获取PDF基本信息
          if command -v pdfinfo &> /dev/null; then
            sudo apt-get install -y poppler-utils
            pdfinfo "_output/JavaScript权威指南.pdf" || echo "无法读取PDF信息"
          fi
        fi

    - name: Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript权威指南
        path: _output/JavaScript权威指南.pdf
        retention-days: 30

    - name: Upload to GitHub Releases (Optional)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: _output/JavaScript权威指南.pdf
