name: Generate PDF from JavaScript Guide

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        echo "📁 设置工作环境..."
        mkdir -p _output _temp
        echo "当前目录: $(pwd)"
        echo "项目结构:"
        find . -name "*.md" -type f | sort

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-fonts-recommended \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils

    - name: Create Structured Markdown File
      run: |
        echo "📝 创建结构化Markdown文件..."
        
        # 创建封面和目录
        cat > _temp/complete.md << 'EOF'
        # JavaScript权威指南第七版
        
        **作者: Richard-Billyham**
        
        **生成时间: $(date)**
        
        ***
        
        ## 目录
        
        EOF
        
        # 添加README.md内容
        if [ -f "README.md" ]; then
          echo "添加简介..."
          echo "# 简介" >> _temp/complete.md
          echo "" >> _temp/complete.md
          cat "README.md" >> _temp/complete.md
          echo "" >> _temp/complete.md
          echo "\\newpage" >> _temp/complete.md
          echo "" >> _temp/complete.md
        fi
        
        # 按正确顺序添加章节
        chapters=(
          "./docs/ch1.md"
          "./docs/ch2.md" 
          "./docs/ch3.md"
          "./docs/ch4.md"
          "./docs/ch5.md"
          "./docs/ch6.md"
          "./docs/ch7.md"
          "./docs/ch8.md"
          "./docs/ch9.md"
          "./docs/ch10.md"
          "./docs/ch11.md"
          "./docs/ch12.md"
          "./docs/ch13.md"
          "./docs/ch14.md"
          "./docs/ch15.md"
          "./docs/ch16.md"
          "./docs/ch17.md"
        )
        
        for chapter in "${chapters[@]}"; do
          if [ -f "$chapter" ]; then
            echo "添加章节: $chapter"
            # 提取章节标题
            title=$(basename "$chapter" .md | sed 's/ch/第/' | sed 's/$/章/')
            echo "# $title" >> _temp/complete.md
            echo "" >> _temp/complete.md
            cat "$chapter" >> _temp/complete.md
            echo "" >> _temp/complete.md
            echo "\\newpage" >> _temp/complete.md
            echo "" >> _temp/complete.md
          else
            echo "⚠️  章节不存在: $chapter"
          fi
        done
        
        echo "✅ 文件创建完成"
        echo "文件大小: $(ls -lh _temp/complete.md)"

    - name: Create Safe LaTeX Header
      run: |
        echo "📄 创建安全的LaTeX头文件..."
        mkdir -p _temp
        
        cat > _temp/header.tex << 'EOF'
        \usepackage{fontspec}
        \setmainfont{Noto Sans CJK SC}
        \usepackage{geometry}
        \geometry{a4paper, margin=2.5cm}
        \usepackage{titlesec}
        \usepackage{fancyhdr}
        \usepackage{xcolor}
        \usepackage{hyperref}
        
        % 章节样式
        \titleformat{\chapter}
          {\normalfont\Huge\bfseries}{\thechapter}{1em}{}
        \titleformat{\section}
          {\normalfont\Large\bfseries}{\thesection}{1em}{}
          
        % 页眉页脚
        \pagestyle{fancy}
        \fancyhf{}
        \fancyhead[L]{\leftmark}
        \fancyhead[R]{\thepage}
        
        % 超链接设置
        \hypersetup{
          colorlinks=true,
          linkcolor=blue,
          urlcolor=cyan,
          pdftitle={JavaScript权威指南第七版},
          pdfauthor={Richard-Billyham}
        }
        
        % 处理代码块中的特殊字符
        \usepackage{listings}
        \lstset{
          basicstyle=\ttfamily\small,
          breaklines=true,
          frame=single,
          backgroundcolor=\color{gray!5},
          escapeinside={\%*}{*)},  % 允许在代码中插入LaTeX
          upquote=true  % 正确处理引号
        }
        EOF

    - name: Generate PDF - Method 1 (Direct)
      run: |
        echo "🎯 方法1: 直接生成PDF..."
        
        pandoc "_temp/complete.md" -o "_output/javascript-guide.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4 \
          --table-of-contents \
          --toc-depth=3 \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ 方法1完成"

    - name: Generate PDF - Method 2 (With Header)
      if: failure()
      run: |
        echo "🎯 方法2: 使用头文件生成PDF..."
        
        pandoc "_temp/complete.md" -o "_output/javascript-guide-with-header.pdf" \
          --pdf-engine=xelatex \
          --include-in-header="${{ github.workspace }}/_temp/header.tex" \
          --table-of-contents \
          --toc-depth=3 \
          -M title="JavaScript权威指南第七版" \
          -M author="Richard-Billyham"
        
        echo "✅ 方法2完成"

    - name: Generate PDF - Method 3 (Minimal)
      if: failure()
      run: |
        echo "🎯 方法3: 最小化设置..."
        
        # 只处理前几章来测试
        head -n 1000 "_temp/complete.md" > "_temp/test.md"
        
        pandoc "_temp/test.md" -o "_output/javascript-guide-test.pdf" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm
        
        echo "✅ 方法3完成"

    - name: Check and Upload Results
      run: |
        echo "📊 检查生成结果..."
        
        # 检查所有PDF文件
        success=false
        for pdf in _output/*.pdf; do
          if [ -f "$pdf" ]; then
            size=$(stat -c%s "$pdf")
            echo "✅ 找到: $pdf ($((size/1024)) KB)"
            if [ $size -gt 102400 ]; then  # 大于100KB
              success=true
              echo "🎉 找到有效的PDF文件: $pdf"
            fi
          fi
        done
        
        if [ "$success" = false ]; then
          echo "❌ 没有生成有效的PDF文件"
          echo "调试信息:"
          echo "complete.md 前20行:"
          head -20 "_temp/complete.md"
          echo ""
          echo "complete.md 最后10行:"
          tail -10 "_temp/complete.md"
          exit 1
        fi

    - name: Upload PDF Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript-Guide-PDF
        path: _output/*.pdf
        retention-days: 30
