name: Generate PDF from Markdown

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        mkdir -p _output _temp
        echo "工作目录结构:"
        find . -type f -name "*.md" | head -20

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-science \
          texlive-pictures \
          texlive-luatex \
          lmodern \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils \
          python3-pygments  # minted 需要 Pygments

    - name: Find and Combine All Markdown Files
      id: combine_files
      run: |
        echo "🔍 查找所有 Markdown 文件..."
        
        # 查找所有 markdown 文件，排除无关目录
        find . -name "*.md" -type f \
          ! -path "./.git/*" \
          ! -path "./node_modules/*" \
          ! -path "./_output/*" \
          ! -path "./_temp/*" \
          ! -name "README.md" \
          ! -name "CONTRIBUTING.md" \
          ! -name "CHANGELOG.md" > _temp/md_files.txt
        
        # 创建合并文件
        if [ -f "README.md" ]; then
          echo "使用 README.md 作为开头"
          cp README.md _temp/combined.md
          echo "" >> _temp/combined.md
          echo "\\newpage" >> _temp/combined.md
          echo "" >> _temp/combined.md
        else
          touch _temp/combined.md
        fi
        
        # 按数字顺序排序文件
        if [ -s "_temp/md_files.txt" ]; then
          echo "📚 找到以下 Markdown 文件:"
          cat _temp/md_files.txt
          
          # 按数字排序
          sort -V _temp/md_files.txt > _temp/sorted_files.txt
          
          # 合并所有文件
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "添加文件: $file"
              echo "# $(basename "$file" .md)" >> _temp/combined.md
              echo "" >> _temp/combined.md
              cat "$file" >> _temp/combined.md
              echo "" >> _temp/combined.md
              echo "\\newpage" >> _temp/combined.md
              echo "" >> _temp/combined.md
            fi
          done < _temp/sorted_files.txt
        else
          echo "⚠️ 没有找到其他 Markdown 文件"
        fi
        
        echo "✅ 合并完成，总大小:"
        ls -lh _temp/combined.md
        echo "行数统计:"
        wc -l _temp/combined.md

    - name: Advanced Preprocessing for LaTeX
      run: |
        echo "🔧 高级预处理 Markdown 文件..."
        
        # 备份原始文件
        cp _temp/combined.md _temp/combined_backup.md
        
        # 方法1: 使用更精确的转义处理
        python3 << 'EOF'
        import re
        
        with open('_temp/combined.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 转义 LaTeX 特殊字符，但在代码块中保持原样
        lines = content.split('\n')
        in_code_block = False
        processed_lines = []
        
        for line in lines:
            # 检测代码块开始/结束
            if line.strip().startswith('```'):
                in_code_block = not in_code_block
                processed_lines.append(line)
                continue
            
            if in_code_block:
                # 在代码块中，我们保持内容不变
                processed_lines.append(line)
            else:
                # 在普通文本中，转义特殊字符
                # 先转义反斜杠
                line = line.replace('\\', '\\\\textbackslash{}')
                # 转义其他特殊字符
                line = line.replace('#', '\\#')
                line = line.replace('$', '\\$')
                line = line.replace('%', '\\%')
                line = line.replace('&', '\\&')
                line = line.replace('_', '\\_')
                line = line.replace('{', '\\{')
                line = line.replace('}', '\\}')
                line = line.replace('~', '\\textasciitilde{}')
                line = line.replace('^', '\\textasciicircum{}')
                processed_lines.append(line)
        
        processed_content = '\n'.join(processed_lines)
        
        with open('_temp/combined_processed.md', 'w', encoding='utf-8') as f:
            f.write(processed_content)
        
        print("✅ Python 预处理完成")
        EOF
        
        # 如果 Python 不可用，使用 sed 作为备用
        if [ ! -f "_temp/combined_processed.md" ]; then
          echo "使用 sed 备用预处理..."
          cp _temp/combined_backup.md _temp/combined_processed.md
          # 基本的转义处理
          sed -i 's/\\/\\\\textbackslash{}/g' _temp/combined_processed.md
          sed -i 's/#/\\#/g' _temp/combined_processed.md
          sed -i 's/\$/\\$/g' _temp/combined_processed.md
          sed -i 's/%/\\%/g' _temp/combined_processed.md
          sed -i 's/&/\\&/g' _temp/combined_processed.md
          sed -i 's/_/\\_/g' _temp/combined_processed.md
          sed -i 's/{/\\{/g' _temp/combined_processed.md
          sed -i 's/}/\\}/g' _temp/combined_processed.md
        fi

    - name: Create Problem Debug Info
      run: |
        echo "🐛 调试问题区域 (第2100-2120行):"
        if [ -f "_temp/combined_processed.md" ]; then
          echo "处理后的文件:"
          sed -n '2100,2120p' _temp/combined_processed.md
        fi
        if [ -f "_temp/combined_backup.md" ]; then
          echo "原始文件:"
          sed -n '2100,2120p' _temp/combined_backup.md
        fi

    - name: Create Robust LaTeX Header (No Minted)
      run: |
        mkdir -p _temp
        cat > _temp/header.tex << 'EOFEND'
        \usepackage{titlesec}
        \usepackage{fancyhdr}
        \usepackage{xcolor}
        \usepackage{hyperref}
        \usepackage{bookmark}
        \usepackage{listings}
        \usepackage{fontspec}
        
        % 防止代码块中的特殊字符出错
        \usepackage[utf8]{inputenc}
        \usepackage{upquote} % 确保引号正确处理
        
        % 章节标题样式
        \titleformat{\chapter}[display]
          {\normalfont\huge\bfseries\color{blue!70!black}}
          {\chaptertitlename\ \thechapter}{20pt}{\Huge}
        
        \titleformat{\section}
          {\normalfont\Large\bfseries\color{blue!60!black}}
          {\thesection}{1em}{}
        
        \titleformat{\subsection}
          {\normalfont\large\bfseries\color{blue!50!black}}
          {\thesubsection}{1em}{}
        
        % 页眉页脚设置
        \pagestyle{fancy}
        \fancyhf{}
        \fancyhead[L]{\leftmark}
        \fancyhead[R]{\thepage}
        \renewcommand{\headrulewidth}{0.5pt}
        
        % 超链接设置
        \hypersetup{
          pdfauthor={Richard-Billyham},
          pdftitle={JavaScript权威指南第七版},
          pdfsubject={JavaScript编程指南},
          pdfkeywords={JavaScript,编程,指南},
          bookmarksnumbered=true,
          bookmarksopen=true,
          pdfstartview=FitH,
          linkcolor=blue,
          urlcolor=cyan,
          citecolor=green
        }
        
        % 代码列表设置 - 避免使用 minted
        \lstset{
          basicstyle=\ttfamily\footnotesize,
          breaklines=true,
          frame=single,
          backgroundcolor=\color{gray!5},
          captionpos=b,
          abovecaptionskip=10pt,
          belowcaptionskip=10pt,
          xleftmargin=10pt,
          xrightmargin=10pt,
          upquote=true,
          showstringspaces=false,
          literate={\\\}{{\textbackslash}}1 % 正确处理反斜杠
        }
        
        % 定义 JavaScript 语法高亮
        \lstdefinelanguage{JavaScript}{
          keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break},
          keywordstyle=\color{blue}\bfseries,
          ndkeywords={class, export, boolean, throw, implements, import, this},
          ndkeywordstyle=\color{darkgray}\bfseries,
          identifierstyle=\color{black},
          sensitive=false,
          comment=[l]{//},
          morecomment=[s]{/*}{*/},
          commentstyle=\color{purple}\ttfamily,
          stringstyle=\color{red}\ttfamily,
          morestring=[b]',
          morestring=[b]"
        }
        
        \lstset{
          language=JavaScript,
          extendedchars=true,
          basicstyle=\footnotesize\ttfamily,
          showstringspaces=false,
          showspaces=false,
          numbers=left,
          numberstyle=\footnotesize,
          numbersep=9pt,
          tabsize=2,
          breaklines=true,
          showtabs=false,
          captionpos=b
        }
        EOFEND

    - name: Generate PDF with Safe Settings
      run: |
        WORKSPACE_PATH="${{ github.workspace }}"
        
        echo "🎯 开始生成PDF (安全设置)..."
        echo "输入文件大小: $(ls -lh _temp/combined_processed.md)"
        
        # 使用安全的pandoc设置，避免minted
        pandoc "_temp/combined_processed.md" -o "_output/javascript-guide.pdf" \
          --metadata title="JavaScript权威指南第七版" \
          --metadata author="Richard-Billyham" \
          --table-of-contents \
          --toc-depth=3 \
          --number-sections \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V sansfont="Noto Sans CJK SC" \
          -V monofont="Noto Sans Mono CJK SC" \
          -V geometry:margin=2.5cm \
          -V geometry:a4paper \
          -V colorlinks=true \
          -V linkcolor=blue \
          -V urlcolor=cyan \
          -V toccolor=blue \
          -V papersize=a4 \
          -V fontsize=11pt \
          -V linestretch=1.2 \
          -V secnumdepth=3 \
          --include-in-header="$WORKSPACE_PATH/_temp/header.tex" \
          --highlight-style=pygments \
          --listings \
          -f markdown+smart \
          --wrap=auto
        
        echo "✅ PDF生成命令执行完成"

    - name: Alternative PDF Generation Method
      if: failure()
      run: |
        echo "🔄 尝试替代PDF生成方法..."
        WORKSPACE_PATH="${{ github.workspace }}"
        
        # 创建极简header
        cat > _temp/minimal_header.tex << 'EOF'
        \usepackage{fontspec}
        \usepackage{hyperref}
        \hypersetup{
          pdfauthor={Richard-Billyham},
          pdftitle={JavaScript权威指南第七版},
          colorlinks=true,
          linkcolor=blue,
          urlcolor=cyan
        }
        \usepackage{geometry}
        \geometry{a4paper, margin=2.5cm}
        EOF
        
        # 使用极简设置生成PDF
        pandoc "_temp/combined_backup.md" -o "_output/javascript-guide-simple.pdf" \
          --metadata title="JavaScript权威指南第七版" \
          --metadata author="Richard-Billyham" \
          --table-of-contents \
          --toc-depth=2 \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V geometry:a4paper \
          -V papersize=a4 \
          -V fontsize=11pt \
          --include-in-header="$WORKSPACE_PATH/_temp/minimal_header.tex" \
          --highlight-style=haddock
        
        echo "✅ 替代PDF生成完成"

    - name: Final PDF Generation Attempt
      if: failure()
      run: |
        echo "🔄 最终尝试：基本PDF生成..."
        
        # 最基本的PDF生成，不使用任何高级特性
        pandoc "_temp/combined_backup.md" -o "_output/javascript-guide-basic.pdf" \
          --metadata title="JavaScript权威指南第七版" \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V papersize=a4
        
        echo "✅ 基本PDF生成完成"

    - name: Verify PDF Generation
      run: |
        echo "📊 验证PDF文件..."
        # 检查任何生成的PDF
        for pdf in "_output/javascript-guide.pdf" "_output/javascript-guide-simple.pdf" "_output/javascript-guide-basic.pdf"; do
          if [ -f "$pdf" ]; then
            echo "找到PDF: $pdf"
            PDF_SIZE=$(stat -c%s "$pdf")
            echo "文件大小: $PDF_SIZE 字节 ($(echo "scale=2; $PDF_SIZE/1024/1024" | bc) MB)"
            
            if command -v pdfinfo >/dev/null 2>&1; then
              echo "PDF 信息:"
              pdfinfo "$pdf" | head -10 || echo "无法读取PDF详细信息"
            fi
            
            if [ "$PDF_SIZE" -lt 102400 ]; then
              echo "⚠️  警告: $pdf 文件可能太小"
            else
              echo "✅ $pdf 文件大小正常"
              MAIN_PDF="$pdf"
            fi
            echo "---"
          fi
        done
        
        if [ -z "$MAIN_PDF" ]; then
          echo "❌ 没有找到有效的PDF文件"
          exit 1
        fi

    - name: Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript-Guide-PDF
        path: |
          _output/javascript-guide.pdf
          _output/javascript-guide-simple.pdf
          _output/javascript-guide-basic.pdf
        retention-days: 30
