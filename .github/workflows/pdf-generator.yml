name: Generate PDF from Markdown

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Environment
      run: |
        mkdir -p _output _temp
        echo "工作目录结构:"
        find . -type f -name "*.md" | head -20

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-science \
          texlive-pictures \
          texlive-luatex \
          lmodern \
          fonts-noto-cjk \
          fonts-noto-color-emoji \
          poppler-utils

    - name: Find and Combine All Markdown Files
      id: combine_files
      run: |
        echo "🔍 查找所有 Markdown 文件..."
        
        # 查找所有 markdown 文件，排除无关目录
        find . -name "*.md" -type f \
          ! -path "./.git/*" \
          ! -path "./node_modules/*" \
          ! -path "./_output/*" \
          ! -path "./_temp/*" \
          ! -name "README.md" \
          ! -name "CONTRIBUTING.md" \
          ! -name "CHANGELOG.md" > _temp/md_files.txt
        
        # 创建合并文件
        if [ -f "README.md" ]; then
          echo "使用 README.md 作为开头"
          cp README.md _temp/combined.md
          echo "" >> _temp/combined.md
          echo "\\newpage" >> _temp/combined.md
          echo "" >> _temp/combined.md
        else
          touch _temp/combined.md
        fi
        
        # 按数字顺序排序文件
        if [ -s "_temp/md_files.txt" ]; then
          echo "📚 找到以下 Markdown 文件:"
          cat _temp/md_files.txt
          
          # 按数字排序
          sort -V _temp/md_files.txt > _temp/sorted_files.txt
          
          # 合并所有文件
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "添加文件: $file"
              echo "# $(basename "$file" .md)" >> _temp/combined.md
              echo "" >> _temp/combined.md
              cat "$file" >> _temp/combined.md
              echo "" >> _temp/combined.md
              echo "\\newpage" >> _temp/combined.md
              echo "" >> _temp/combined.md
            fi
          done < _temp/sorted_files.txt
        else
          echo "⚠️ 没有找到其他 Markdown 文件"
        fi
        
        echo "✅ 合并完成，总大小:"
        ls -lh _temp/combined.md
        echo "行数统计:"
        wc -l _temp/combined.md

    - name: Preprocess Markdown for LaTeX Compatibility
      run: |
        echo "🔧 预处理 Markdown 文件以兼容 LaTeX..."
        
        # 备份原始文件
        cp _temp/combined.md _temp/combined_backup.md
        
        # 转义 LaTeX 特殊字符
        sed -i 's/\\/\\\\textbackslash /g' _temp/combined.md
        sed -i 's/#/\\#/g' _temp/combined.md
        sed -i 's/\$/\\$/g' _temp/combined.md
        sed -i 's/%/\\%/g' _temp/combined.md
        sed -i 's/&/\\&/g' _temp/combined.md
        sed -i 's/_/\\_/g' _temp/combined.md
        sed -i 's/{/\\{/g' _temp/combined.md
        sed -i 's/}/\\}/g' _temp/combined.md
        sed -i 's/~/\\textasciitilde /g' _temp/combined.md
        sed -i 's/\^/\\textasciicircum /g' _temp/combined.md
        
        # 特别处理 \n 和其他转义序列
        sed -i 's/\\n/\\\\n/g' _temp/combined.md
        sed -i 's/\\t/\\\\t/g' _temp/combined.md
        sed -i 's/\\r/\\\\r/g' _temp/combined.md
        
        echo "✅ 预处理完成"

    - name: Debug Problematic Section
      run: |
        echo "🐛 调试问题区域 (第2100-2110行):"
        if [ -f "_temp/combined.md" ]; then
          sed -n '2100,2110p' _temp/combined.md
        fi

    - name: Create Robust LaTeX Header
      run: |
        mkdir -p _temp
        cat > _temp/header.tex << 'EOFEND'
        \usepackage{titlesec}
        \usepackage{fancyhdr}
        \usepackage{xcolor}
        \usepackage{hyperref}
        \usepackage{bookmark}
        \usepackage{listings}
        \usepackage{minted}
        
        % 防止代码块中的特殊字符出错
        \usepackage[utf8]{inputenc}
        \usepackage{upquote} % 确保引号正确处理
        
        % 章节标题样式
        \titleformat{\chapter}[display]
          {\normalfont\huge\bfseries\color{blue!70!black}}
          {\chaptertitlename\ \thechapter}{20pt}{\Huge}
        
        \titleformat{\section}
          {\normalfont\Large\bfseries\color{blue!60!black}}
          {\thesection}{1em}{}
        
        \titleformat{\subsection}
          {\normalfont\large\bfseries\color{blue!50!black}}
          {\thesubsection}{1em}{}
        
        % 页眉页脚设置
        \pagestyle{fancy}
        \fancyhf{}
        \fancyhead[L]{\leftmark}
        \fancyhead[R]{\thepage}
        \renewcommand{\headrulewidth}{0.5pt}
        
        % 超链接设置
        \hypersetup{
          pdfauthor={Richard-Billyham},
          pdftitle={JavaScript权威指南第七版},
          pdfsubject={JavaScript编程指南},
          pdfkeywords={JavaScript,编程,指南},
          bookmarksnumbered=true,
          bookmarksopen=true,
          pdfstartview=FitH,
          linkcolor=blue,
          urlcolor=cyan,
          citecolor=green
        }
        
        % 代码列表设置 - 更兼容的设置
        \lstset{
          basicstyle=\ttfamily\footnotesize,
          breaklines=true,
          frame=single,
          backgroundcolor=\color{gray!5},
          captionpos=b,
          abovecaptionskip=10pt,
          belowcaptionskip=10pt,
          xleftmargin=10pt,
          xrightmargin=10pt,
          escapeinside={\%*}{*)}, % 允许在代码中插入LaTeX
          upquote=true, % 确保直引号
          showstringspaces=false
        }
        
        % 处理内联代码
        \newcommand{\code}[1]{\texttt{#1}}
        EOFEND

    - name: Generate PDF with Robust Settings
      run: |
        WORKSPACE_PATH="${{ github.workspace }}"
        
        echo "🎯 开始生成PDF (使用更稳健的设置)..."
        echo "输入文件大小: $(ls -lh _temp/combined.md)"
        
        # 使用更稳健的pandoc设置
        pandoc "_temp/combined.md" -o "_output/javascript-guide.pdf" \
          --metadata title="JavaScript权威指南第七版" \
          --metadata author="Richard-Billyham" \
          --table-of-contents \
          --toc-depth=3 \
          --number-sections \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V sansfont="Noto Sans CJK SC" \
          -V monofont="Noto Sans Mono CJK SC" \
          -V geometry:margin=2.5cm \
          -V geometry:a4paper \
          -V colorlinks=true \
          -V linkcolor=blue \
          -V urlcolor=cyan \
          -V toccolor=blue \
          -V papersize=a4 \
          -V fontsize=11pt \
          -V linestretch=1.2 \
          -V secnumdepth=3 \
          --include-in-header="$WORKSPACE_PATH/_temp/header.tex" \
          --highlight-style=pygments \
          --listings \
          -f markdown+smart \
          --wrap=auto
        
        echo "✅ PDF生成命令执行完成"

    - name: Fallback PDF Generation (if main method fails)
      if: failure()
      run: |
        echo "🔄 尝试备用PDF生成方法..."
        WORKSPACE_PATH="${{ github.workspace }}"
        
        # 简化设置，避免复杂特性
        pandoc "_temp/combined_backup.md" -o "_output/javascript-guide-simple.pdf" \
          --metadata title="JavaScript权威指南第七版" \
          --metadata author="Richard-Billyham" \
          --table-of-contents \
          --toc-depth=2 \
          --pdf-engine=xelatex \
          -V mainfont="Noto Sans CJK SC" \
          -V geometry:margin=2.5cm \
          -V geometry:a4paper \
          -V papersize=a4 \
          -V fontsize=11pt \
          --highlight-style=kate
        
        echo "✅ 备用PDF生成完成"

    - name: Verify PDF Generation
      run: |
        echo "📊 验证PDF文件..."
        # 检查主PDF或备用PDF
        if [ -f "_output/javascript-guide.pdf" ]; then
          PDF_FILE="_output/javascript-guide.pdf"
        elif [ -f "_output/javascript-guide-simple.pdf" ]; then
          PDF_FILE="_output/javascript-guide-simple.pdf"
        else
          echo "❌ 没有找到PDF文件"
          exit 1
        fi
        
        PDF_SIZE=$(stat -c%s "$PDF_FILE")
        echo "PDF 文件大小: $PDF_SIZE 字节 ($(echo "scale=2; $PDF_SIZE/1024/1024" | bc) MB)"
        
        if command -v pdfinfo >/dev/null 2>&1; then
          echo "📄 PDF 信息:"
          pdfinfo "$PDF_FILE" || echo "无法读取PDF详细信息"
        fi
        
        if [ "$PDF_SIZE" -lt 102400 ]; then
          echo "⚠️  警告: PDF 文件可能太小，内容可能不完整"
          exit 1
        else
          echo "✅ PDF 文件大小正常"
        fi

    - name: Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: JavaScript-Guide-PDF
        path: |
          _output/javascript-guide.pdf
          _output/javascript-guide-simple.pdf
        retention-days: 30
